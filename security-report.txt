================================================================================
OBSF-SURF SECURITY ASSESSMENT REPORT
Generated: 2025-07-30
================================================================================

EXECUTIVE SUMMARY
================================================================================
This security assessment examined the obsf-surf project, a Next.js surf conditions 
website. The analysis identified 7 security vulnerabilities ranging from HIGH to 
MEDIUM severity. While no CRITICAL vulnerabilities were found, several issues 
require immediate attention to improve the application's security posture.

VULNERABILITY SUMMARY
================================================================================
HIGH SEVERITY:    3 issues
MEDIUM SEVERITY:  4 issues
LOW SEVERITY:     0 issues
TOTAL:           7 issues

HIGH SEVERITY VULNERABILITIES
================================================================================

1. CORS MISCONFIGURATION - UNRESTRICTED ACCESS
   Severity: HIGH
   Location: vercel.json:8, all API endpoints
   Risk: Allows any domain to make requests to your API endpoints
   
   Description:
   All API endpoints use wildcard CORS ("Access-Control-Allow-Origin": "*") 
   which allows any website to make requests to your APIs. This enables:
   - Cross-site request forgery attacks
   - Data theft from legitimate users
   - API abuse from malicious domains
   
   Files Affected:
   - vercel.json (global CORS policy)
   - pages/api/*.js (individual endpoint CORS headers)
   
   Remediation:
   Replace wildcard CORS with specific domain restrictions:
   
   ```javascript
   // In vercel.json, replace:
   "value": "*"
   // With:
   "value": "https://obsuf.surf"
   
   // In each API endpoint, replace:
   res.setHeader('Access-Control-Allow-Origin', '*');
   // With:
   const allowedOrigins = ['https://obsuf.surf', 'https://www.obsuf.surf'];
   const origin = req.headers.origin;
   if (allowedOrigins.includes(origin)) {
       res.setHeader('Access-Control-Allow-Origin', origin);
   }
   ```

2. SENSITIVE INFORMATION EXPOSURE IN ERROR RESPONSES
   Severity: HIGH
   Location: pages/api/predict.js:36-38, pages/api/validate-summary.js:113
   Risk: API errors expose internal system information
   
   Description:
   Error responses return detailed internal error messages that could reveal:
   - Internal API endpoints and URLs
   - Third-party service details
   - System architecture information
   
   Example from predict.js:36-38:
   ```javascript
   const errorText = await response.text();
   console.error("Error from Cloud Function:", response.status, errorText);
   throw new Error(`Prediction service returned ${response.status}: ${errorText}`);
   ```
   
   Remediation:
   Replace detailed error messages with generic ones:
   
   ```javascript
   // Replace detailed errors with:
   throw new Error('Prediction service temporarily unavailable');
   
   // Log detailed errors server-side only:
   console.error('Prediction API error:', response.status, errorText);
   res.status(500).json({ error: 'Service temporarily unavailable' });
   ```

3. HARD-CODED GOOGLE TAG MANAGER ID IN CLIENT CODE
   Severity: HIGH
   Location: pages/_document.js:50
   Risk: Tracking ID exposed and potentially spoofable
   
   Description:
   Google Tag Manager ID 'GTM-PQHL9L66' is hard-coded in client-side code,
   making it visible to anyone inspecting the source. This enables:
   - Tracking ID enumeration
   - Potential analytics manipulation
   - Revenue/traffic data exposure
   
   Remediation:
   Move GTM ID to environment variable:
   
   ```javascript
   // In next.config.mjs:
   env: {
     GTM_ID: process.env.GTM_ID,
   }
   
   // In _document.js:
   'https://www.googletagmanager.com/gtm.js?id='+${process.env.GTM_ID || 'GTM-PQHL9L66'}+dl
   ```

MEDIUM SEVERITY VULNERABILITIES
================================================================================

4. MISSING RATE LIMITING ON API ENDPOINTS
   Severity: MEDIUM
   Location: All API endpoints
   Risk: API abuse and resource exhaustion
   
   Description:
   No rate limiting is implemented on any API endpoints, allowing:
   - Denial of service attacks
   - API quota exhaustion (OpenAI, weather APIs)
   - Resource consumption attacks
   
   Remediation:
   Implement rate limiting using Vercel's built-in rate limiting or middleware:
   
   ```javascript
   // Create middleware.js:
   import { NextResponse } from 'next/server';
   import { Ratelimit } from '@upstash/ratelimit';
   
   const ratelimit = new Ratelimit({
     redis: /* redis instance */,
     limiter: Ratelimit.slidingWindow(100, '1 h'),
   });
   
   export async function middleware(request) {
     const ip = request.ip ?? '127.0.0.1';
     const { success } = await ratelimit.limit(ip);
     
     if (!success) {
       return new NextResponse('Too Many Requests', { status: 429 });
     }
     
     return NextResponse.next();
   }
   ```

5. LACK OF INPUT VALIDATION IN API ENDPOINTS
   Severity: MEDIUM
   Location: pages/api/predict.js:8, pages/api/validate-summary.js:34
   Risk: Injection attacks and data corruption
   
   Description:
   API endpoints accept user input without proper validation:
   - predict.js accepts tide, wind, pt_reyes, sf_bar without validation
   - validate-summary.js accepts summary and surfData without validation
   
   Remediation:
   Add input validation using a schema validation library:
   
   ```javascript
   import Joi from 'joi';
   
   const predictSchema = Joi.object({
     tide: Joi.string().valid('RISING', 'FALLING', 'UNKNOWN').required(),
     wind: Joi.string().required(),
     pt_reyes: Joi.number().min(0).max(50).required(),
     sf_bar: Joi.number().min(0).max(50).required()
   });
   
   // In handler:
   const { error, value } = predictSchema.validate(req.body);
   if (error) {
     return res.status(400).json({ error: 'Invalid input parameters' });
   }
   ```

6. INSECURE RANDOM FALLBACK DATA IN WIND API
   Severity: MEDIUM
   Location: pages/api/wind.js:221-222
   Risk: Predictable data generation
   
   Description:
   Wind API uses Math.random() for fallback data which is cryptographically
   insecure and predictable. While not directly exploitable, it reduces
   data integrity during API failures.
   
   Current code:
   ```javascript
   speed: Math.floor(Math.random() * 15) + 5,
   direction: Math.floor(Math.random() * 360),
   ```
   
   Remediation:
   Use crypto.randomInt() for better randomness:
   
   ```javascript
   import { randomInt } from 'crypto';
   
   // Replace with:
   speed: randomInt(5, 20),
   direction: randomInt(0, 360),
   ```

7. POTENTIAL XSS VIA DANGEROUSLYSETINNERHTML
   Severity: MEDIUM
   Location: pages/_document.js:20, pages/_document.js:43
   Risk: Cross-site scripting if data is user-controlled
   
   Description:
   Two instances of dangerouslySetInnerHTML are used for JSON-LD structured data
   and Google Tag Manager. While currently using static data, this pattern is
   risky if any dynamic content is introduced.
   
   Remediation:
   Ensure all content passed to dangerouslySetInnerHTML is properly sanitized:
   
   ```javascript
   // Current usage is safe, but add validation if dynamic:
   const sanitizedData = JSON.stringify(structuredData).replace(/</g, '\\u003c');
   dangerouslySetInnerHTML={{ __html: sanitizedData }}
   ```

POSITIVE SECURITY FINDINGS
================================================================================
✓ No high-severity dependency vulnerabilities found (npm audit clean)
✓ CSP headers configured for SVG images in next.config.mjs
✓ HTTPS enforcement for external API calls
✓ Error handling with fallback mechanisms
✓ Input sanitization for external API responses
✓ React components use safe rendering patterns
✓ No eval() or Function() usage detected
✓ Environment variables properly used for sensitive data

REMEDIATION PRIORITY
================================================================================
IMMEDIATE (Complete within 24 hours):
1. Fix CORS configuration to restrict origins
2. Sanitize error messages in API responses
3. Move GTM ID to environment variable

HIGH PRIORITY (Complete within 1 week):
4. Implement rate limiting on API endpoints
5. Add input validation to all API endpoints

MEDIUM PRIORITY (Complete within 2 weeks):
6. Replace Math.random() with crypto.randomInt()
7. Add XSS protection review for dangerouslySetInnerHTML usage

SECURITY RECOMMENDATIONS
================================================================================
1. Implement Content Security Policy (CSP) headers
2. Add request logging and monitoring
3. Set up automated security scanning in CI/CD
4. Regular dependency vulnerability scanning
5. Implement API key rotation strategy
6. Add health check endpoints with authentication
7. Consider implementing OWASP security headers

CONTACT
================================================================================
For questions about this security assessment, please create an issue at:
https://github.com/anthropics/claude-code/issues